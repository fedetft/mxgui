
/**
\mainpage Miosix GUI library
\section introduction Introduction
Mxgui is a lightweight and configurable GUI library for 32bit microcontrollers.
It can drive monochrome and color displays using microcontrollers with limited
amounts of RAM memory and that cannot in general perform double buffering
because of that. Its target are microcontroller down to 32KB of FLASH and 8KB
of RAM memory.

It is designed to work together with the Miosix kernel, which provide a
threadsafe C and C++ standard library as well as posix threads.

\section design Library design
The library is divided in two "levels", named Mxgui level 1 and Mxgui level 2,
to address embedded systems with different level of complexity.
- \ref pub_iface is an abstraction of a generic display device,
  providing methods to write text with different fonts, even variable width and
  antialiased ones, drawing images, providing clipping facilities and simple
  graphic primitives, such as line drawing.
  It also provides basic support for concurrent access to the same display
  by multiple threads.
- \ref pub_iface_2 which is currently in very early stage of
  development, is designed to handle multiplexing of a number of different
  applications on a single display device, providing input event dispatching
  from devices such as touchscreens, and also featuring a basic set of display
  widgets such as buttons, etc.

\section tools Tools
The library comprehends a set of tools designed to run on a Linux host PC
to aid in the design of graphical user interfaces for embedded systems, namely
- \ref pngconv, a tool to convert images in .png format into a set of .cpp and
  .h files to be able to embed images into an embedded firmware
- \ref fontr, a tool to generate font lookup tables from standard .ttf and
  .bdf file format. These lookup tables are again designed to be embedded into
  a firmware
- \ref sim a pixel-perfect simulator of the mxgui library making possible
  to debug the visual aspect of an user interface on an host PC instead of
  directly on the embedded device

\section start Getting started
The mxgui library depends on the Miosix kernel, so you should start by
downloading the kernel before. You can find it at
http://gitorious.org/miosix-kernel . If this is the first time you are
downloading Miosix, you need to install the Miosix specific compiler, you can
find a guide to do so here:
http://www.webalice.it/fede.tft/miosix/miosix_toolchain_1.54_linux.html .
Once you have downloaded the Miosix kernel, download the mxgui library in the
miosix-kernel directory. A simple way to download both Miosix and mxgui is to
use git, like this:
\code
git clone git://gitorious.org/miosix-kernel/miosix-kernel.git
cd miosix-kernel # To download mxgui within the miosix-kernel folder
git clone git://gitorious.org/mxgui/mxgui.git
\endcode

The miosix-kernel folder is from now named the 'top level directory' of your
project.

Now you need to edit the Makefile in the top level directory to tell Miosix
that it needs to compile the mxgui library. To do so locate the SUBDIRS
variable and append the "mxgui" string, like this:
\code
##
## List here subdirectories which contains makefiles
##
SUBDIRS := miosix mxgui
\endcode

Also change the SRC variable by replacing testsuite.cpp with main.cpp

Lastly, replace the content of main.cpp with this code:
\code
#include "mxgui/entry.h"
#include "mxgui/display.h"

using namespace mxgui;

ENTRY()
{
    Display& display=DisplayManager::instance().getDisplay();
    {
        DrawingContext dc(display);
        dc.write(Point(0,0),"Hello world!");
    }
    for(;;) ; //To prevent application shutdown
}
\endcode

If you don't have a board such as an stm3210e-eval to test the code, you
can test it in the \ref sim.

\section examples Examples
Examples on how to use the library are available in the mxgui/_examples
folder. The range from a simple hello world to a 3D rendering engine.
To try the examples, copy the corresponding directory in the top level
directory, and edit the Makefile (or CMakeLists.txt if targeting the simulator)
accordingly.

\author Terraneo Federico
*/

/**
\page tools Mxgui tools
The mxgui tools is a set of utilities to help in developing embedded user
interfaces. They are released under the GPL, with no linking exception as
opposed to the mxgui library since they are standalone applications and not
libraries.

\section req Requirements
The mxgui tools are designed to be run from a Linux desktop, Windows is not
currently supported as the bash shell is sometimes required. They depend on
CMake for the build system, and the boost libraries. The mxgui simulator also
requires the Qt libraries (development version) as they are used to open a
window on screen.

\section codegen Code generators
The code generators are a set of three command line applications, namely
pngconverter, fontrendering and resourcefs which are used to generate source
code or binary files. They can be found in the mxgui/_tools/code_generators
directory.

To build them, open a shell in the mxgui/_tools/code_generators/build directory
and type
\code
cmake ..
make
\endcode
As a result you will find the binaries in the same directory.

\subsection pngconv pngconverter
Pngconverter is likely to be the most used tool, its purpose is to convert
a png image in a set of a .cpp and a .h file with a static instance of the
Image class, usable to draw an image on screen.

When run with the --help parameter it prints this:
\code
./pngconverter --help
PngConverter utility v1.21
Designed by TFT : Terraneo Federico Technologies
Options:
  --help                Prints this.
  --in arg              Input png file (required)
  --depth arg           Color depth, 1,8,16,18 or 24 bits (required)
  --out arg             Output png file for validation
  --binary              Generate a binary file instead of a .cpp/.h file
\endcode

To use it, assume you have an image called test.png that needs to be embedded
into a firmware at a 16 bit per pixel color depth, the command line to do so is
\code
./pngconverter --in test.png --depth 16
\endcode
As a result, the program will produce, in the same directory where the test.png
file is, two files: test.cpp and test.h
In particular, the file test.h will contain the following line of code:
\code
extern const mxgui::Image test;
\endcode
This is the instance of the Image class that can be used to draw the image.

To actually draw the image on screen, it is required to perform the following
steps: first, the file test.cpp should be added to the makefile (if compiling
for Miosix), or the qtsimulator's CMakeLists.txt (if using the simulator),
then, a simple main program that prints the image is this:
\code
#include "mxgui/entry.h"
#include "mxgui/display.h"
#include "test.h" //Header file of the image to draw

using namespace mxgui;

ENTRY()
{
    {
        DrawingContext dc(DisplayManager::instance().getDisplay());
        dc.drawImage(Point(0,0),test);
    }
    for(;;) ;
}
\endcode
It should be noted that the name of the Image class instance is the same as
the png file name. Therefore the png file name should be a valid C++ variable
identifier, thetis, it should not contain spaces or begin with a number.

\subsection fontr fontrendering
This tool is used to convert a TTF or BDF font file into a set of lookup
tables, contained in an header file, usable to print text using that font.

You will not likely use this tool directly, as mxgui has a set of predefined
fonts available by including mxgui/misc_inst.h. Note that, for code size
reasons, you may need to enable support for those fonts in mxgui_settings.h.
For example, bold fonts are disabled by default, if you need them uncomment
MXGUI_ENABLE_BOLD_FONTS in mxgui_settings.h

However, if you have a specific font you want to use, you can convert it
using fontrendering.

Have a look at the mxgui/_tools/code_generators/convert.sh script to see how
to use fontrendering, or type
\code
./fontrendering --help
\endcode

\section sim Mxgui simulator
The Mxgui simulator, also called qtsimulator is a Qt gui application that
open a window of the size of the embedded display, and allows to debug the
visual aspect of an mxgui application without using the embedded device.
It is pixel perfect in the sense that Qt is only used to provide a window,
all the font, image and line drawing algorithms used for the simulator are
the same as the ones that will be used when the code in run in the embedded
system.

On the other hand, qtsimulator does only map mxgui calls into a virtual
framebuffer in Qt, it does not simulate the whole Miosix kernel, nor
it is a binary virtual machine that executes ARM code on x86 CPUs. This means
that it does not simulate the cpu and memory limitations of the embedded
system, nor its peripherals. This means that it cannot be used to profile the
embedded code as when run on the embedded system it will run slower due to the
lower power processor, and also it does not help in debugging memory issues.
For instance, allocating an 1MB data structure will succeed in the simulator,
but will fail on the embedded system (unless it has more than 1MB of RAM...)

The simulator is in the mxgui/_tools/qtsimulator. To compile it, as usual,
open a shell in the mxgui/_tools/qtsimulator/build folder and type
\code
cmake ..
make
\endcode
But before you might want to edit the FOO_SRCS in the CMakeLists.txt file
to add your sorce files. In fact, the simulator and the Miosix kernel use two
different build systems, CMake for the simulator and plain makefiles for
Miosix. This means that if you add a source file to your project, you need to
remember to add it to both the Makefile in the top level directory (for Miosix)
and to the CMakeLists.txt on mxgui/_tools/qtsimulator (for the simulator).

The simulator compiles into a binary in the build folder. You can launch it by
simply double-clicking the file.
\image html simulator.png "The Mxgui simulator, running one of the demos"
*/

#if 0
/**
\page resourcefs ResourceFs

*/

/**
\page backend Writing a backend for other display types

*/
#endif

/**
\defgroup pub_iface Mxgui level 1
*/

/**
\defgroup pub_iface_2 Mxgui level 2
*/
